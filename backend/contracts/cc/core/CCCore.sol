/// SPDX-License-Identifier: UNLICENSED
/// Copyright Â© 2023 Chainlabs Switzerland SA
/// All Rights Reserved

import "../../wtf/apps/WtfApp.sol";
import "../../wtf/distributors/erc20/ERC20ControlBridge.sol";
import "../../wtf/interfaces/functional/ERC20Claimable.sol";

pragma solidity ^0.8.18;

/// @title CryptoCookies' Core Contract
/// @author Chainlabs Switzerland SA
/// @notice This contract is at the core of the CryptoCookies environment.
/// Redirects the revenue generated by Wtf to a specific set of pools (bridges) managed
/// by a handler contract.
contract CCCore is WtfApp, ERC20Claimable {
	uint256 public constant HUGE_APPROVAL = 1 << 255;

	// We utilize controlled ERC20 bridges to enhance flexibility and ease of use.
	// CryptoCookies' pool handler has control over stakes.
	ERC20ControlBridge public immutable FDG_BRIDGE;
	ERC20ControlBridge public immutable CKI_BRIDGE;

	/// @notice Constructs the core of CryptoCookies' environment.
	/// @param _fdgDistr Wtf's Fudge (FDG) distribution contract.
	/// @param _ckiDistr Wtf's Cookie (CKI) distribution contract.
	/// @param _admin The administrator over bridge stakes.
	constructor(address _fdgDistr, address _ckiDistr, address _admin) WtfApp(_fdgDistr, _ckiDistr) {
		FDG_BRIDGE = new ERC20ControlBridge(address(FDG), address(this), _admin);
		FDG.approve(address(FDG_BRIDGE), HUGE_APPROVAL);

		CKI_BRIDGE = new ERC20ControlBridge(address(CKI), address(this), _admin);
		CKI.approve(address(CKI_BRIDGE), HUGE_APPROVAL);
	}

	/// @notice Dispatch function callable by the bridge contracts only.
	/// @dev This solution alleviates the absence of higher-order functions in Solidity.
	/// @return amountClaimed The amount forwarded to the bridge.
	function claim() external returns (uint256) {
		if (msg.sender == address(FDG_BRIDGE)) return FDG_DISTR.claim();
		else if (msg.sender == address(CKI_BRIDGE)) return CKI_DISTR.claim();
		else revert();
	}

	/// @notice Dispatch function callable by the bridge contracts only.
	/// @dev This solution alleviates the absence of higher-order functions in Solidity.
	/// @return token The token associated to the bridge.
	function token() external view returns (address) {
		if (msg.sender == address(FDG_BRIDGE)) return address(FDG);
		else if (msg.sender == address(CKI_BRIDGE)) return address(CKI);
		else revert();
	}
}
