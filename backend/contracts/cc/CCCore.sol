/// SPDX-License-Identifier: UNLICENSED
/// Copyright Â© 2023 Chainlabs Switzerland SA
/// All Rights Reserved

import "../wtf/WtfApp.sol";
import "../wtf/distributors/ERC20ControlBridge.sol";
import "./CCStaking.sol";
import "./locking/CCLocking.sol";

pragma solidity ^0.8.18;

/// @title CryptoCookies' Core Contract
/// @author Chainlabs Switzerland SA
/// @notice This contract serves as the main point of access of the CryptoCookies environment.
/// Redirects the revenue generated by Wtf to a specific set of pools (bridges) managed by the DAO.
contract CCCore is WtfApp {
	uint256 public constant HUGE_APPROVAL = 1 << 255;

	// We utilize controlled ERC20 bridges to enhance flexibility and ease of use. 
	// CryptoCookies' DAO has control over stakes.
	ERC20ControlBridge public FDG_BRIDGE;
	ERC20ControlBridge public CKI_BRIDGE;

	/// @notice Constructs the entire CryptoCookies' environment.
	/// @param _fdgDistr Wtf's Fudge (FDG) distribution contract.
	/// @param _ckiDistr Wtf's Cookie (CKI) distribution contract.
	/// @param _admin CryptoCookies' DAO contract.
	constructor(address _fdgDistr, address _ckiDistr, address _admin) WtfApp(_fdgDistr, _ckiDistr) {
		FDG_BRIDGE = new ERC20ControlBridge(_fdgDistr, _admin);
		FDG.approve(address(FDG_BRIDGE), HUGE_APPROVAL);

		CKI_BRIDGE = new ERC20ControlBridge(_ckiDistr, _admin);
		CKI.approve(address(CKI_BRIDGE), HUGE_APPROVAL);
	}
}
